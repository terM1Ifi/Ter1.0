{
  "name": "socketio-over-nodejs",
  "preferGlobal": true,
  "version": "2.0.0",
  "author": {
    "name": "Muaz Khan",
    "email": "muazkh@gmail.com"
  },
  "description": "socketio-over-nodejs for WebRTC Experiments: https://www.webrtc-experiment.com/socket.io/.",
  "contributors": [
    {
      "name": "Muaz Khan",
      "email": "muazkh@gmail.com"
    }
  ],
  "scripts": {
    "start": "node signaler.js"
  },
  "main": "signaler.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/muaz-khan/WebRTC-Experiment.git"
  },
  "keywords": [
    "webrtc",
    "javascript",
    "socketio-over-nodejs",
    "websockets",
    "nodejs",
    "Node.js",
    "webrtc-signaling",
    "socket.io"
  ],
  "analyze": false,
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "socket.io": "0.9.x",
    "express": "3.2.x"
  },
  "bugs": {
    "url": "https://github.com/muaz-khan/WebRTC-Experiment/issues"
  },
  "homepage": "https://github.com/muaz-khan/WebRTC-Experiment",
  "_id": "socketio-over-nodejs@2.0.0",
  "_from": "socketio-over-nodejs@",
  "readme": "#### [Socket.io over Node.js](https://github.com/muaz-khan/WebRTC-Experiment/blob/master/socketio-over-nodejs) / [Demo](http://webrtc-signaling.jit.su/)\n\n**socket.io over node.js** for webrtc-signaling!\n\n<a href=\"https://nodei.co/npm/socketio-over-nodejs/\">\n    <img src=\"https://nodei.co/npm/socketio-over-nodejs.png\">\n</a>\n\n=\n\n#### Install via `npm`\n\n```\nnpm install socketio-over-nodejs\n```\n\nand run the `signaler.js` nodejs file:\n\n```\ncd node_modules/socketio-over-nodejs/ && node signaler\n```\n\n=\n\n1. https://www.webrtc-experiment.com/docs/WebRTC-Signaling-Concepts.html\n2. http://www.RTCMultiConnection.org/FAQ/\n3. http://www.RTCMultiConnection.org/docs/sessionid/\n4. http://www.RTCMultiConnection.org/docs/channel-id/\n\n=\n\nOtherwise, follow these steps:\n\n1. Download and extract **ZIP file** of this repository then copy `folder-location` of the`signaler.js` file\n2. Open **Node.js command prompt** window\n3. Type command `cd folder-location` where `folder-location` can be `C:\\socketio-over-nodejs`\n4. Type `npm install express` or [download ZIP](http://code.snyco.net/node_modules/express.zip)\n5. Type `npm install socket.io` or [download ZIP](http://code.snyco.net/node_modules/socket.io.zip)\n6. Type `node signaler` to run the node.js server\n\nThen open `http://localhost:8888/`.\n\n=\n\n#### If you want to deploy your application\n\n1. Create an account at `nodejitsu`\n2. Use same **Node.js command prompt** window\n3. Type `jitsu deploy` \n\nand you're done!\n\n**Remember:** `jitsu deploy` command will deploy the entire directory containing all all files including `node_modules` (i.e. dependencies).\n\n=\n\n#### How to use?\n\nIn `ui.js` files you can find `openSocket` method; or in all libraries; you can find `openSignalingChannel` method.\n\n```javascript\n// http://socketio-over-nodejs.hp.af.cm/\n// http://socketio-over-nodejs.jit.su:80/\n// http://webrtc-signaling.jit.su:80/\n\nvar SIGNALING_SERVER = 'http://socketio-over-nodejs.hp.af.cm';\nconnection.openSignalingChannel = function(config) {   \n   var channel = config.channel || this.channel || 'default-namespace';\n   var sender = Math.round(Math.random() * 9999999999) + 9999999999;\n   \n   io.connect(SIGNALING_SERVER).emit('new-channel', {\n      channel: channel,\n      sender : sender\n   });\n   \n   var socket = io.connect(SIGNALING_SERVER + channel);\n   socket.channel = channel;\n   \n   socket.on('connect', function () {\n      if (config.callback) config.callback(socket);\n   });\n   \n   socket.send = function (message) {\n        socket.emit('message', {\n            sender: sender,\n            data  : message\n        });\n    };\n   \n   socket.on('message', config.onmessage);\n};\n```\n\n`io.connect(URL).emit('new-channel')` starts a new namespace that is used privately or publicly to transmit/exchange appropriate stuff e.g. room-details, participation-requests, SDP, ICE, etc.\n\n=\n\n#### Presence Detection\n\nYou can detect presence of a room like this:\n\n```javascript\n// http://socketio-over-nodejs.hp.af.cm/\n// http://socketio-over-nodejs.jit.su:80/\n// http://webrtc-signaling.jit.su:80/\n\nvar SIGNALING_SERVER = 'http://webrtc-signaling.jit.su:80/';\nfunction testChannelPresence(channel) {\n    var socket = io.connect(SIGNALING_SERVER);\n    socket.on('presence', function (isChannelPresent) {\n        console.log('is channel present', isChannelPresent);\n        if (!isChannelPresent) startNewSession();\n    });\n    socket.emit('presence', channel);\n}\n\n// test whether default channel already created or not!\ntestChannelPresence('default-channel');\n```\n\n=\n\n#### What is `cd folder-location`?\n\nUsing this command; you can open project's directory (i.e. folder).\n\n=\n\n#### What is `node signaler`?\n\nThis command runs node.js server via `signaler.js` file. That file handles socket.io relevant stuff.\n\n=\n\n#### What is `jitsu deploy`?\n\nThis command deploys the **entire directory** (i.e. project, including all `node_modules` dependencies) over `nodejitsu` servers. You will be able to access your deployed project using URL like this:\n\n```javascript\nhttp://username.jit.su/\n```\n\nSee the demo URL: http://webrtc-signaling.jit.su/\n\n=\n\n#### Note\n\nEach experiment is using something like this:\n\n```javascript\nvar SIGNALING_SERVER = '/';\n```\n\nThis is the URL of your site. By default it will be equal to `http://localhost:8888/`.\n\nIt is strongly recommended to use absolute URL including port number:\n\n```javascript\nvar SIGNALING_SERVER = 'http://domain.com:8888/';\n```\n\n=\n\n#### Are you beginner or totally novice?\n\n1. To **run socket.io on your computer**; you need to [download](http://nodejs.org/download/) `node.js` software from `nodejs.org`.\n2. If you're using windows; in the `Start Menus`; you can type `node` in the search-box. `Node.js command prompt` will be listed on the top.\n3. You can use same command prompt to run any `node.js` file; also you can write `nodejitsu` commands in the same place e.g. `jitsu deploy` or `jitsu login` etc.\n4. Default port `8888` is used for this experiment. You can manually open this URL: `http://localhost:8888/`\n\n=\n\n#### Signaling Concepts\n\nInterested to understand WebRTC Signaling Concepts? Read [this document](https://github.com/muaz-khan/WebRTC-Experiment/blob/master/socketio-over-nodejs/Signaling-Concepts.md).\n\n=\n\n#### SSL/TLS/HTTPS/Socket.io/Node.js ??\n\nhttps://github.com/muaz-khan/WebRTC-Experiment/issues/62\n\n=\n\n#### License\n\n[Socket.io over Node.js](https://github.com/muaz-khan/WebRTC-Experiment/blob/master/socketio-over-nodejs) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) 2013 [Muaz Khan](https://plus.google.com/100325991024054712503).\n",
  "readmeFilename": "README.md",
  "dist": {
    "shasum": "a4be07952d3d7549589045a57cee779269c5d35c"
  },
  "_resolved": "https://registry.npmjs.org/socketio-over-nodejs/-/socketio-over-nodejs-2.0.0.tgz"
}
